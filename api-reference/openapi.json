{
  "openapi": "3.1.0",
  "info": {
    "title": "Cuey API",
    "description": "REST API for scheduling webhooks with precision timing. Schedule one-time events or create recurring cron jobs.",
    "version": "1.0.0",
    "contact": {
      "email": "support@cuey.dev"
    }
  },
  "servers": [
    {
      "url": "https://cuey.dev",
      "description": "Production server"
    }
  ],
  "security": [
    {
      "bearerAuth": []
    }
  ],
  "paths": {
    "/api/v1/events": {
      "get": {
        "summary": "List events",
        "description": "Get a paginated list of events with optional filters",
        "operationId": "listEvents",
        "tags": ["Events"],
        "x-codeSamples": [
          {
            "lang": "TypeScript",
            "label": "TypeScript SDK",
            "source": "import { cuey } from 'cuey';\n\nconst { data: events, pagination } = await cuey.events.list({\n  page: 0,\n  limit: 10,\n  status: 'pending'\n});"
          }
        ],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number (0-indexed)",
            "schema": {
              "type": "integer",
              "default": 0,
              "minimum": 0
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Items per page",
            "schema": {
              "type": "integer",
              "default": 100,
              "minimum": 1,
              "maximum": 1000
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "Filter by status",
            "schema": {
              "type": "string",
              "enum": ["pending", "processing", "success", "failed"]
            }
          },
          {
            "name": "cron_id",
            "in": "query",
            "description": "Filter by cron ID",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventsPaginatedResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Create event",
        "description": "Create a new scheduled event",
        "operationId": "createEvent",
        "tags": ["Events"],
        "x-codeSamples": [
          {
            "lang": "TypeScript",
            "label": "TypeScript SDK",
            "source": "import { cuey } from 'cuey';\n\nconst event = await cuey.schedule({\n  webhook_url: 'https://api.example.com/webhook',\n  method: 'POST',\n  scheduled_at: '2024-12-31T23:59:59Z',\n  payload: {\n    message: 'Hello, Cuey!'\n  }\n});"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateEventInput"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Event created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/api/v1/events/{id}": {
      "get": {
        "summary": "Get event",
        "description": "Get a single event by ID",
        "operationId": "getEvent",
        "tags": ["Events"],
        "x-codeSamples": [
          {
            "lang": "TypeScript",
            "label": "TypeScript SDK",
            "source": "import { cuey } from 'cuey';\n\nconst event = await cuey.events.get('event-id');"
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "put": {
        "summary": "Update event",
        "description": "Update an existing event. Only pending events can be updated.",
        "operationId": "updateEvent",
        "tags": ["Events"],
        "x-codeSamples": [
          {
            "lang": "TypeScript",
            "label": "TypeScript SDK",
            "source": "import { cuey } from 'cuey';\n\nconst event = await cuey.events.update('event-id', {\n  webhook_url: 'https://api.example.com/webhook',\n  method: 'POST',\n  scheduled_at: '2025-01-01T00:00:00Z',\n  payload: { message: 'Updated' }\n});"
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateEventInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Event updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "summary": "Delete event",
        "description": "Delete an event. Only pending events that were created manually (not by cron jobs) can be deleted.",
        "operationId": "deleteEvent",
        "tags": ["Events"],
        "x-codeSamples": [
          {
            "lang": "TypeScript",
            "label": "TypeScript SDK",
            "source": "import { cuey } from 'cuey';\n\nawait cuey.events.delete('event-id');"
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Event deleted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/api/v1/crons": {
      "get": {
        "summary": "List crons",
        "description": "Get a paginated list of cron jobs with optional filters",
        "operationId": "listCrons",
        "tags": ["Crons"],
        "x-codeSamples": [
          {
            "lang": "TypeScript",
            "label": "TypeScript SDK",
            "source": "import { cuey } from 'cuey';\n\nconst { data: crons, pagination } = await cuey.crons.list({\n  page: 0,\n  limit: 10,\n  is_active: true\n});"
          }
        ],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number (0-indexed)",
            "schema": {
              "type": "integer",
              "default": 0,
              "minimum": 0
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Items per page",
            "schema": {
              "type": "integer",
              "default": 100,
              "minimum": 1,
              "maximum": 1000
            }
          },
          {
            "name": "is_active",
            "in": "query",
            "description": "Filter by active status",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CronsPaginatedResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Create cron",
        "description": "Create a new cron job",
        "operationId": "createCron",
        "tags": ["Crons"],
        "x-codeSamples": [
          {
            "lang": "TypeScript",
            "label": "TypeScript SDK",
            "source": "import { cuey } from 'cuey';\n\nconst cron = await cuey.repeat({\n  webhook_url: 'https://api.example.com/daily-report',\n  method: 'POST',\n  cron_expression: '0 9 * * *',\n  timezone: 'America/New_York',\n  payload: {\n    report_type: 'daily'\n  }\n});"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCronInput"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Cron created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CronResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/api/v1/crons/{id}": {
      "get": {
        "summary": "Get cron",
        "description": "Get a single cron job by ID",
        "operationId": "getCron",
        "tags": ["Crons"],
        "x-codeSamples": [
          {
            "lang": "TypeScript",
            "label": "TypeScript SDK",
            "source": "import { cuey } from 'cuey';\n\nconst cron = await cuey.crons.get('cron-id');"
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CronResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "put": {
        "summary": "Update cron",
        "description": "Update an existing cron job. When a cron is updated, all pending events created by that cron are automatically deleted.",
        "operationId": "updateCron",
        "tags": ["Crons"],
        "x-codeSamples": [
          {
            "lang": "TypeScript",
            "label": "TypeScript SDK",
            "source": "import { cuey } from 'cuey';\n\nconst cron = await cuey.crons.update('cron-id', {\n  webhook_url: 'https://api.example.com/webhook',\n  method: 'POST',\n  cron_expression: '*/30 * * * *',\n  timezone: 'America/New_York',\n  is_active: true\n});"
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCronInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Cron updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CronResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "summary": "Delete cron",
        "description": "Delete a cron job. This will also delete all events created by that cron job.",
        "operationId": "deleteCron",
        "tags": ["Crons"],
        "x-codeSamples": [
          {
            "lang": "TypeScript",
            "label": "TypeScript SDK",
            "source": "import { cuey } from 'cuey';\n\nawait cuey.crons.delete('cron-id');"
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Cron deleted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "description": "API key authentication. Include your API key in the Authorization header as: Bearer <your-api-key>"
      }
    },
    "schemas": {
      "Event": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "cron_id": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "retry_of": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "scheduled_at": {
            "type": "string",
            "format": "date-time"
          },
          "executed_at": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "status": {
            "type": "string",
            "enum": ["pending", "processing", "success", "failed"]
          },
          "webhook_url": {
            "type": "string",
            "format": "uri"
          },
          "method": {
            "type": "string",
            "enum": ["GET", "POST", "PUT", "PATCH", "DELETE", "HEAD", "OPTIONS"]
          },
          "headers": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "nullable": true
          },
          "payload": {
            "type": "object",
            "nullable": true
          },
          "retry_config": {
            "$ref": "#/components/schemas/RetryConfig",
            "nullable": true
          },
          "response_status": {
            "type": "integer",
            "nullable": true
          },
          "response_headers": {
            "type": "object",
            "nullable": true
          },
          "response_body": {
            "type": "string",
            "nullable": true
          },
          "response_duration": {
            "type": "integer",
            "nullable": true
          },
          "response_error": {
            "type": "string",
            "nullable": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "team_id": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          }
        },
        "required": ["id", "scheduled_at", "status", "webhook_url", "method"]
      },
      "Cron": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "cron_expression": {
            "type": "string"
          },
          "timezone": {
            "type": "string",
            "nullable": true
          },
          "webhook_url": {
            "type": "string",
            "format": "uri"
          },
          "method": {
            "type": "string",
            "enum": ["GET", "POST", "PUT", "PATCH", "DELETE", "HEAD", "OPTIONS"]
          },
          "headers": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "nullable": true
          },
          "payload": {
            "type": "object",
            "nullable": true
          },
          "retry_config": {
            "$ref": "#/components/schemas/RetryConfig",
            "nullable": true
          },
          "is_active": {
            "type": "boolean",
            "nullable": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "team_id": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          }
        },
        "required": ["id", "cron_expression", "webhook_url", "method"]
      },
      "CreateEventInput": {
        "type": "object",
        "required": ["webhook_url", "scheduled_at"],
        "properties": {
          "webhook_url": {
            "type": "string",
            "format": "uri"
          },
          "method": {
            "type": "string",
            "enum": [
              "GET",
              "POST",
              "PUT",
              "PATCH",
              "DELETE",
              "HEAD",
              "OPTIONS"
            ],
            "default": "POST"
          },
          "scheduled_at": {
            "type": "string",
            "format": "date-time",
            "description": "ISO timestamp, must be in the future"
          },
          "headers": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "nullable": true
          },
          "payload": {
            "type": "object",
            "nullable": true
          },
          "retry_config": {
            "$ref": "#/components/schemas/RetryConfig",
            "nullable": true
          }
        }
      },
      "CreateCronInput": {
        "type": "object",
        "required": ["webhook_url", "cron_expression"],
        "properties": {
          "webhook_url": {
            "type": "string",
            "format": "uri"
          },
          "method": {
            "type": "string",
            "enum": [
              "GET",
              "POST",
              "PUT",
              "PATCH",
              "DELETE",
              "HEAD",
              "OPTIONS"
            ],
            "default": "POST"
          },
          "cron_expression": {
            "type": "string",
            "description": "Cron expression (e.g., '0 0 * * *')"
          },
          "timezone": {
            "type": "string",
            "nullable": true,
            "description": "IANA timezone identifier (e.g., 'America/New_York')"
          },
          "headers": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "nullable": true
          },
          "payload": {
            "type": "object",
            "nullable": true
          },
          "retry_config": {
            "$ref": "#/components/schemas/RetryConfig",
            "nullable": true
          },
          "is_active": {
            "type": "boolean",
            "default": true
          }
        }
      },
      "RetryConfig": {
        "type": "object",
        "required": ["maxRetries", "backoffMs", "backoffType"],
        "properties": {
          "maxRetries": {
            "type": "integer",
            "minimum": 1,
            "maximum": 10,
            "description": "Maximum number of retry attempts"
          },
          "backoffMs": {
            "type": "integer",
            "minimum": 100,
            "maximum": 5000,
            "description": "Backoff delay in milliseconds"
          },
          "backoffType": {
            "type": "string",
            "enum": ["exponential", "linear"],
            "description": "Backoff strategy type"
          }
        }
      },
      "Pagination": {
        "type": "object",
        "properties": {
          "page": {
            "type": "integer"
          },
          "limit": {
            "type": "integer"
          },
          "total": {
            "type": "integer"
          }
        },
        "required": ["page", "limit", "total"]
      },
      "EventResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/Event"
          }
        },
        "required": ["data"]
      },
      "EventsPaginatedResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Event"
            }
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          }
        },
        "required": ["data", "pagination"]
      },
      "CronResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/Cron"
          }
        },
        "required": ["data"]
      },
      "CronsPaginatedResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Cron"
            }
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          }
        },
        "required": ["data", "pagination"]
      },
      "SuccessResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "success": {
                "type": "boolean"
              }
            }
          }
        },
        "required": ["data"]
      },
      "Error": {
        "type": "object",
        "properties": {
          "error": {
            "type": "object",
            "properties": {
              "message": {
                "type": "string"
              },
              "code": {
                "type": "string",
                "enum": [
                  "UNAUTHORIZED",
                  "NOT_FOUND",
                  "BAD_REQUEST",
                  "VALIDATION_ERROR",
                  "INTERNAL_SERVER_ERROR"
                ]
              },
              "details": {
                "type": "object"
              }
            },
            "required": ["message", "code"]
          }
        },
        "required": ["error"]
      }
    },
    "responses": {
      "BadRequest": {
        "description": "Bad request",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "Unauthorized": {
        "description": "Unauthorized - Invalid or missing API key",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "NotFound": {
        "description": "Resource not found",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "InternalServerError": {
        "description": "Internal server error",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      }
    }
  },
  "tags": [
    {
      "name": "Events",
      "description": "Endpoints for managing scheduled events"
    },
    {
      "name": "Crons",
      "description": "Endpoints for managing recurring cron jobs"
    }
  ]
}
